import me.ruslanys.telegraff.core.dsl.handler
import me.ruslanys.telegraff.core.dto.request.MarkdownMessage
import me.ruslanys.telegraff.core.exception.ValidationException

enum class PaymentMethod(val content: String) {
    CARD("–ö–∞—Ä—Ç–æ–π"), CASH("–ù–∞–ª–∏—á–∫–æ–π")
}

handler("/start", "—Ç–∞–∫—Å–∏") {
    step<String>("locationFrom") {
        question {
            MarkdownMessage("–ö–∞–∫–∞—è –º–æ–¥–µ–ª—å –∞–≤—Ç–æ? üöï")
        }
    }

    step<String>("locationTo") {
        question {
            MarkdownMessage("–ö–∞–∫–æ–π –≥–æ–¥ –∞–≤—Ç–æ?", "üë¥üèø 2010", "2011", "2012", "2020 ü¶Ñ")
        }
    }

    step<PaymentMethod>("paymentMethod") {
        val card = "üí≥ –ö–∞—Ä—Ç–æ–π - —è –º–∞–∂–æ—Ä"
        val cash = "üíµ –ù–∞–ª–∏—á–∫–æ–π - –±–æ –∏ —Ç–∞–∫ –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ –ø–æ–ª—É—á–∞—é"

        question {
            MarkdownMessage("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –∏–ª–∏ –Ω–∞–ª–∏—á–∫–æ–π?", card, cash)
        }

        validation {
            when (it.toLowerCase()) {
                card -> PaymentMethod.CARD
                cash -> PaymentMethod.CASH
                else -> throw ValidationException("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            }
        }
    }

    step<String>("deliveryTime") {
        question {
            MarkdownMessage(
                "–ö–∞–∫ —Å—Ä–æ—á–Ω–æ –í–∞–º –Ω—É–∂–Ω–æ –∞–≤—Ç–æ?",
                "30 –¥–Ω–µ–π",
                "60 –¥–Ω–µ–π",
                "70 –¥–Ω–µ–π, —è –Ω–µ —Å–ø–µ—à—É –±–ª—è",
                "–ù–ê –ó–ê–í–¢–†–ê –ë–†–û –ò–ë–®, –±–∞—Ç—è –ø–ª–∞—Ç–∏—Ç!"
            )
        }
    }

    process { state, answers: Map<String, Any> ->
        val from = answers["locationFrom"] as String
        val to = answers["locationTo"] as String
        val paymentMethod = answers["paymentMethod"] as PaymentMethod

        // Business logic

        MarkdownMessage(
            """
            –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${state.chat.id}. 
            –ê–≤—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –ø—Ä–∏–≤–µ–∑–µ–º: $from 
            –∏ –æ–Ω–æ –±—É–¥–µ—Ç $to –≥–æ–¥–∞. 
            
            –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç: ${paymentMethod.content}.
        """.trimIndent()
        )
    }
}