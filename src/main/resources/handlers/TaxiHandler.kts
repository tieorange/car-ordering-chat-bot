import me.ruslanys.telegraff.core.dsl.handler
import me.ruslanys.telegraff.core.dto.request.MarkdownMessage
import me.ruslanys.telegraff.core.dto.request.PhotoMessage
import me.ruslanys.telegraff.core.exception.ValidationException

enum class FuelType(val content: String) {
    FUEL("Benzin"), DYSEL("Dizel")
}


handler("/start", "—Ç–∞–∫—Å–∏") {

    step<String>("productionYear") {
        /* TODO: add this  question before the below one
* ‚úÖ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ "–µ–≤—Ä–æ–±–ª—è—Ö–∏" –ø–æ –Ω–æ–≤–æ–º—É –∑–∞–∫–æ–Ω—É –æ –ª—å–≥–æ—Ç–Ω–æ–π —Ä–∞—Å—Ç–∞–º–æ–∂–∫–µ ‚Ññ3704-–î –∏ 4643-–î ‚úÖ
* */

        question {
            MarkdownMessage("\uD83D\uDE97 –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", "2007", "2008", "2010")
        }
    }

    step<String>("enginePower") {
        question {
            MarkdownMessage(
                "\uD83D\uDE97 –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è?",
                "üë¥üèø –î–æ 2000—Å–º3",
                "2001—Å–º3-3000—Å–º3",
                "3001—Å–º3-4000—Å–º3"
            )
        }
    }

    step<String>("enginePower2") {
        question {
            MarkdownMessage("\uD83D\uDE97 –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥:")
        }
    }


    step<FuelType>("fuelType") {
        val fuel = "üí≥ \uD83D\uDE97 –ë–µ–Ω–∑–∏–Ω"
        val dysel = "üíµ \uD83D\uDE97 –î–∏–∑–µ–ª—å"

        question {
            MarkdownMessage("\uD83D\uDE97 –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:", fuel, dysel)
        }

        validation {
            when (it) {
                fuel -> FuelType.FUEL
                dysel -> FuelType.DYSEL
                else -> throw ValidationException("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            }
        }
    }

    step<String>("dsfdsfsdaf") {
        question {
            MarkdownMessage("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏...", "OK")
        }
    }

    step<String>("deliveryTime2") {
        question {
            MarkdownMessage(
                "–°—É–º–º–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è 1175 ‚Ç¨ \n" +
                        "\n" +
                        "‚ùóÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n" +
                        "\uD83D\uDD18 –î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å 8500 –≥—Ä–Ω", "OK"
            )
        }
    }

    process { state, answers: Map<String, Any> ->

        // TODO: 1 STAWKA BAZOWA: CURRENT_Year - Production_year
        val currentYear = 2021
        val productionYear = answers["productionYear"] as String
        val yearResult = currentYear - productionYear.toInt()

        // TODO: 2 EngineProwerStawka: do 2k - 0.25EUR; Ilya the orlinyj glaz
        //  2001-3000 - 0.2;
        //  3001-4000 - 0.25;
        //  4001-5000 - 0.35;
        //  5001-more - 0.5;
        //        val enginePower = answers["enginePower"] as String
        val enginePower2 = answers["enginePower2"] as String
        val enginePowerResult = enginePower2.toInt()
        val enginePowerResultEnum =
            when (enginePowerResult) {
                in 2001..3000 -> {
                    0.2
                }
                in 3001..4000 -> {
                    0.25
                }
                in 4001..5000 -> {
                    0.35
                }
                else -> {
                    0.5
                }
            }


        // TODO: 3; Benzin - 0;
        //  Hybrid - 0
        //  Dyzel - 100
        val fuelType = answers["fuelType"] as FuelType
        val fuelTypeResult: Int = if (fuelType == FuelType.FUEL) {
            0
        } else {
            100
        }


        //        val deliveryTime = answers["deliveryTime"] as String

        // Business logic

        val FINAL_RESULT = yearResult + enginePowerResultEnum * fuelTypeResult
        val bytes = readClasspathResource("images/sample.png")
        //        PhotoMessage(bytes)

        PhotoMessage(
            bytes,
            ("‚ö†Ô∏è –°—É–º–º–∞ —Ç–∞–º–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è $FINAL_RESULT ‚Ç¨ \n" +
                    "\n" +
                    "‚ùóÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n" +
                    "\uD83D\uDD18 –î–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å 8500 –≥—Ä–Ω (250EUR)" +
                    "").trimIndent()
        )
    }
}